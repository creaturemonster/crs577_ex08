<project name="ex08_restclient" basedir="." default="deploy-services">
    <property name="appname" value="${ant.project.name}" />

    <import file="../build-common.xml" />
    
    <property name="service.app.context" value="inventory"/>
    <property name="generated.package" value="com.ltree.inventory.generated"/>
	<property name="custom.class.name" value="InventoryRestClient"/>

    <target name="deploy-services"
            description="Deploys the REST services that the client uses">
        <ant dir="../Ex06_jaxrs_solution" target="deploy" inheritAll="false" useNativeBaseDir="true"/>
        <ant dir="../Ex07_json_solution" target="deploy" inheritAll="false" useNativeBaseDir="true"/>
    </target>

    <target name="build-client"
            depends="run-wadl2java"
            description="Build JAX-RS client">
        <antcall target="build" />
    </target>
    
    <property name="wadl2java.project.lib"
              value="${basedir}/wadl2java-lib"/>
    
    <taskdef name="wadl2java" classname="org.jvnet.ws.wadl2java.WJCTask">
        <classpath>
            <fileset dir="${wadl2java.project.lib}">
                <include name="*.jar"/>
                <exclude name="wadl-cmdline*.jar"/>
            </fileset>
        </classpath>
    </taskdef>

    <target name="run-wadl2java"
            description="Runs wadl2java to generate JavaBeans for client of REST inventory service">
        <exec executable="hostname" outputproperty="hostname"/>

        <property name="inventory.service.wadl.url"
                  value="http://${hostname}:8080/${service.app.context}/rs/application.wadl"/>
        <property name="custom.class.uri"
                  value="http://${hostname}:8080/${service.app.context}/rs/"/>
        
        <echo message="Compiling the description from ${inventory.service.wadl.url}" />
        
        <antcall target="init"/>
        
        <!-- the "description" attribute is the URL of the REST service's description
             (in other words, the service WADL) -->
        <wadl2java
              description="${inventory.service.wadl.url}"
              package="${generated.package}"
              autoSchemaPackage="false"
              target="./generated"
              generationStyle="jaxrs20">
               <!-- wsdl2java checks timestamps of the files listed in <produces> and <depends>.
                    If none have been modified, wsdl2java won't regenerate files. -->
            <produces dir="generated" includes="**/*.java" />
            <depends dir="." includes="build.xml"/>
            <depends dir=".." includes="build-common.xml"/>
            <depends dir="${wadl2java.project}" includes="wadl2java.jar"/>
            <!-- The custom class defines wrapper elements for sending REST requests -->
            <customclassname uri="${custom.class.uri}" classname="${custom.class.name}"/>
        </wadl2java>
        
        <!-- You can use methods in the custom class generated by wadl2java to send REST
             requests without creating a Client, without setting the path or MIME types, etc.
             Examples:
             
            import com.ltree.inventory.generated.InventoryRestClient;
            ...
            ItemList itemList = InventoryRestClient.item()
                                                   .all()
                                                   .getAsItemList();

            Response response = InventoryRestClient.item()
                                                   .productId(productId)
                                                   .delete();
                                                     
            String response = InventoryRestClient.item()
                                                 .postXml(item, String.class);
                                                 
            Response response = InventoryRestClient.item()
                                                   .productId(productId)
                                                   .putXml(item);                                                                
        -->
        
        <!-- work-around for wadl2java bug: Jersey throws exceptions if you have an Item
             in the request body of a POST or PUT. If we add @XmlRootElement to Item,
             Jersey can marshall it (but we can't add @XmlRootElement to ItemList or it
             fails with a different exception) -->
        <replace dir="generated"
                 token="@XmlAccessorType"
                 value="@javax.xml.bind.annotation.XmlRootElement @XmlAccessorType">
            <include name="**/Item.java"/>
        </replace>
        
    </target>
    
    <target name="debug"
            depends="common.debug"
            description="Dumps values of Ant properties">
        <echo>$${wadl2java.project.lib} = ${wadl2java.project.lib}</echo>
        <echo>$${generated.package} = ${generated.package}</echo>
        <echo>$${custom.class.name} = ${custom.class.name}</echo>
    </target>
</project>